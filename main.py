import asyncio
import sqlite3
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from states import PaymentStates, save_invoice_to_db, init_db

import CryptoBot
import CrystalPay
import aaio
import lava

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    payment_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å AAIO", callback_data="topup_aaio")],
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å CryptoBot", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å LavaPay", callback_data="topup_lava")],
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å CrystalPay", callback_data="topup_crystalpay")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=payment_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å AAIO"
@dp.callback_query(F.data == "topup_aaio")
async def process_topup_aaio(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ AAIO:")
    await state.set_state(PaymentStates.waiting_for_amount_aaio)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ AaioAPI
@dp.message(PaymentStates.waiting_for_amount_aaio)
async def process_amount_aaio(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        payment_url, order_id = await aaio.create_payment(amount)

        if payment_url:
            payment_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ AAIO', url=payment_url)],
                [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment:{order_id}')]
            ])
            await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ AAIO. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=payment_markup)
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ AaioAPI
@dp.callback_query(F.data.startswith('check_payment'))
async def check_payment(callback_query: types.CallbackQuery):
    _, order_id = callback_query.data.split(':')
    try:
        payment_status = await aaio.check_payment_status(order_id)
        if payment_status == 'paid':
            await callback_query.message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ AAIO —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')
            await callback_query.message.edit_reply_markup()
        elif payment_status == 'expired':
            await callback_query.message.answer('‚ùå –°—á–µ—Ç —á–µ—Ä–µ–∑ AAIO –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.')
        elif payment_status == 'pending':
            await callback_query.message.answer('‚è≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ AAIO –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
        elif payment_status == 'timeout':
            await callback_query.message.answer('‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AAIO –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        else:
            await callback_query.message.answer('‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ AAIO –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback_query.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ AAIO. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å CryptoBot"
@dp.callback_query(F.data == "topup_crypto")
async def process_topup_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoBot:")
    await state.set_state(PaymentStates.waiting_for_amount_crypto)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot
@dp.message(PaymentStates.waiting_for_amount_crypto)
async def process_amount_crypto(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        invoice_url, invoice_id = await CryptoBot.create_crypto_invoice(amount)

        save_invoice_to_db(message.chat.id, 'USDT', amount, invoice_id, 'pending', '', 'CryptoBot')

        payment_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot', url=invoice_url)],
            [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_crypto_payment:{invoice_id}')]
        ])
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å {amount} USDT —á–µ—Ä–µ–∑ CryptoBot. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=payment_markup)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
@dp.callback_query(F.data.startswith('check_crypto_payment'))
async def check_crypto_payment(callback_query: types.CallbackQuery):
    invoice_id = callback_query.data.split(':')[-1]

    conn = sqlite3.connect('invoices.db')
    cursor = conn.cursor()
    cursor.execute('SELECT status FROM invoices WHERE invoice_id = ?', (invoice_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        status = result[0]
        await callback_query.answer(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot: {status}")
    else:
        await callback_query.answer("–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å LavaPay"
@dp.callback_query(F.data == "topup_lava")
async def process_topup_lava(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ LavaPay:")
    await state.set_state(PaymentStates.waiting_for_amount_lava)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ LavaPay
@dp.message(PaymentStates.waiting_for_amount_lava)
async def process_amount_lava(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        order_id = str(uuid.uuid4())
        payment_url, invoice_id = await lava.create_lava_invoice(amount, order_id)

        if payment_url:
            save_invoice_to_db(message.chat.id, 'LavaPay', amount, invoice_id, 'pending', order_id, 'LavaPay')

            callback_data = f'check_lava:{order_id[:8]}:{invoice_id[:8]}'
            payment_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ LavaPay', url=payment_url)],
                [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=callback_data)]
            ])
            await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å {amount} —á–µ—Ä–µ–∑ LavaPay. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=payment_markup)
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ LavaPay
@dp.callback_query(F.data.startswith('check_lava'))
async def check_lava_payment(callback_query: types.CallbackQuery):
    try:
        _, short_order_id, short_invoice_id = callback_query.data.split(':')
        
        conn = sqlite3.connect('invoices.db')
        cursor = conn.cursor()
        cursor.execute('SELECT order_id, invoice_id FROM invoices WHERE order_id LIKE ? AND invoice_id LIKE ?', 
                       (f'{short_order_id}%', f'{short_invoice_id}%'))
        result = cursor.fetchone()
        conn.close()

        if not result:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–≤–æ–π—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        order_id, invoice_id = result

        payment_status = await lava.check_lava_payment_status(order_id, invoice_id)

        if payment_status == 'paid':
            await callback_query.message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LavaPay —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')
            await callback_query.message.edit_reply_markup()
        elif payment_status == 'created':
            await callback_query.message.answer('‚è≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LavaPay –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
        else:
            await callback_query.message.answer('‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LavaPay –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback_query.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ LavaPay. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å CrystalPay"
@dp.callback_query(F.data == "topup_crystalpay")
async def process_topup_crystalpay(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CrystalPay:")
    await state.set_state(PaymentStates.waiting_for_amount_crystalpay)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CrystalPay
@dp.message(PaymentStates.waiting_for_amount_crystalpay)
async def process_amount_crystalpay(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        description = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CrystalPay"
        payment_url, invoice_id = CrystalPay.create_crystalpay_invoice(amount, description)

        if payment_url:
            save_invoice_to_db(message.chat.id, 'CrystalPay', amount, invoice_id, 'pending', invoice_id, 'CrystalPay')

            payment_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CrystalPay', url=payment_url)],
                [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_crystalpay:{invoice_id}')]
            ])
            await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å {amount} —á–µ—Ä–µ–∑ CrystalPay. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=payment_markup)
            await state.clear()
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CrystalPay
@dp.callback_query(F.data.startswith('check_crystalpay'))
async def check_crystalpay_payment(callback_query: types.CallbackQuery):
    invoice_id = callback_query.data.split(':')[-1]

    payment_status = CrystalPay.check_crystalpay_payment_status(invoice_id)
    
    if payment_status == 'payed':
        await callback_query.message.answer('‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CrystalPay —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')
        await callback_query.message.edit_reply_markup()
    elif payment_status == 'notpayed':
        await callback_query.message.answer('‚è≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CrystalPay –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
    else:
        await callback_query.message.answer('‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CrystalPay –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
